/** Copyright 2020-2021 Alibaba Group Holding Limited.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by informer-gen. DO NOT EDIT.

package v1alpha1

import (
	"context"
	time "time"

	k8sv1alpha1 "github.com/v6d-io/v6d/k8s/api/k8s/v1alpha1"
	versioned "github.com/v6d-io/v6d/k8s/generated/clientset/versioned"
	internalinterfaces "github.com/v6d-io/v6d/k8s/generated/informers/externalversions/internalinterfaces"
	v1alpha1 "github.com/v6d-io/v6d/k8s/generated/listers/k8s/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// LocalObjectInformer provides access to a shared informer and lister for
// LocalObjects.
type LocalObjectInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1alpha1.LocalObjectLister
}

type localObjectInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

// NewLocalObjectInformer constructs a new informer for LocalObject type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewLocalObjectInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredLocalObjectInformer(client, namespace, resyncPeriod, indexers, nil)
}

// NewFilteredLocalObjectInformer constructs a new informer for LocalObject type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredLocalObjectInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.K8sV1alpha1().LocalObjects(namespace).List(context.TODO(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.K8sV1alpha1().LocalObjects(namespace).Watch(context.TODO(), options)
			},
		},
		&k8sv1alpha1.LocalObject{},
		resyncPeriod,
		indexers,
	)
}

func (f *localObjectInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredLocalObjectInformer(client, f.namespace, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *localObjectInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&k8sv1alpha1.LocalObject{}, f.defaultInformer)
}

func (f *localObjectInformer) Lister() v1alpha1.LocalObjectLister {
	return v1alpha1.NewLocalObjectLister(f.Informer().GetIndexer())
}
